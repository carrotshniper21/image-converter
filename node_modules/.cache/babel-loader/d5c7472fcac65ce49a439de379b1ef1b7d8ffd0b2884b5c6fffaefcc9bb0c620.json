{"ast":null,"code":"import http from \"../http-common\";\nconst upload = (file, onUploadProgress) => {\n  const reader = new FileReader();\n  return new Promise((resolve, reject) => {\n    reader.onload = () => {\n      var _reader$result;\n      const imageData = (_reader$result = reader.result) === null || _reader$result === void 0 ? void 0 : _reader$result.toString().split(\",\")[1];\n      if (!imageData) {\n        reject(\"Failed to read image data.\");\n        return;\n      }\n      const data = {\n        \"file\": {\n          \"filetype\": file.type,\n          \"contents\": imageData\n        }\n      };\n      http.post(\"/upload\", data, {\n        headers: {\n          \"Content-Type\": \"application/json\" // Set the content type to JSON\n        },\n\n        onUploadProgress\n      }).then(response => {\n        resolve(response.data);\n      }).catch(error => {\n        reject(error);\n      });\n    };\n    reader.readAsDataURL(file); // Read the file as a data URL\n  });\n};\n\nexport default upload;","map":{"version":3,"names":["http","upload","file","onUploadProgress","reader","FileReader","Promise","resolve","reject","onload","_reader$result","imageData","result","toString","split","data","type","post","headers","then","response","catch","error","readAsDataURL"],"sources":["/home/carrot/repos/image-converter/src/services/FileUploadService.ts"],"sourcesContent":["import http from \"../http-common\";\n\nconst upload = (file: File, onUploadProgress: any): Promise<any> => {\n  const reader = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    reader.onload = () => {\n      const imageData = reader.result?.toString().split(\",\")[1];\n\n      if (!imageData) {\n        reject(\"Failed to read image data.\");\n        return;\n      }\n\n      const data = {\n        \"file\": { \"filetype\": file.type, \"contents\": imageData }\n      };\n\n\n      http\n        .post(\"/upload\", data, {\n          headers: {\n            \"Content-Type\": \"application/json\", // Set the content type to JSON\n          },\n          onUploadProgress,\n        })\n        .then((response) => {\n          resolve(response.data);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    };\n\n    reader.readAsDataURL(file); // Read the file as a data URL\n  });\n}\n\nexport default upload;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,gBAAgB;AAEjC,MAAMC,MAAM,GAAGA,CAACC,IAAU,EAAEC,gBAAqB,KAAmB;EAClE,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;EAE/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCJ,MAAM,CAACK,MAAM,GAAG,MAAM;MAAA,IAAAC,cAAA;MACpB,MAAMC,SAAS,IAAAD,cAAA,GAAGN,MAAM,CAACQ,MAAM,cAAAF,cAAA,uBAAbA,cAAA,CAAeG,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAEzD,IAAI,CAACH,SAAS,EAAE;QACdH,MAAM,CAAC,4BAA4B,CAAC;QACpC;MACF;MAEA,MAAMO,IAAI,GAAG;QACX,MAAM,EAAE;UAAE,UAAU,EAAEb,IAAI,CAACc,IAAI;UAAE,UAAU,EAAEL;QAAU;MACzD,CAAC;MAGDX,IAAI,CACDiB,IAAI,CAAC,SAAS,EAAEF,IAAI,EAAE;QACrBG,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB,CAAE;QACtC,CAAC;;QACDf;MACF,CAAC,CAAC,CACDgB,IAAI,CAAEC,QAAQ,IAAK;QAClBb,OAAO,CAACa,QAAQ,CAACL,IAAI,CAAC;MACxB,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAK;QAChBd,MAAM,CAACc,KAAK,CAAC;MACf,CAAC,CAAC;IACN,CAAC;IAEDlB,MAAM,CAACmB,aAAa,CAACrB,IAAI,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC;;AAED,eAAeD,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}