{"ast":null,"code":"import http from\"../http-common\";var upload=function upload(file,onUploadProgress){var reader=new FileReader();return new Promise(function(resolve,reject){reader.onload=function(){var _reader$result;var imageData=(_reader$result=reader.result)===null||_reader$result===void 0?void 0:_reader$result.toString().split(\",\")[1];if(!imageData){reject(\"Failed to read image data.\");return;}var data={\"file\":{\"filetype\":file.type,\"contents\":imageData}};http.post(\"/upload\",data,{headers:{\"Content-Type\":\"application/json\"// Set the content type to JSON\n},onUploadProgress:onUploadProgress}).then(function(response){resolve(response.data);}).catch(function(error){reject(error);});};reader.readAsDataURL(file);// Read the file as a data URL\n});};export default upload;","map":{"version":3,"names":["http","upload","file","onUploadProgress","reader","FileReader","Promise","resolve","reject","onload","_reader$result","imageData","result","toString","split","data","type","post","headers","then","response","catch","error","readAsDataURL"],"sources":["/home/carrot/repos/carrotshniper21.github.io/src/services/FileUploadService.ts"],"sourcesContent":["import http from \"../http-common\";\n\nconst upload = (file: File, onUploadProgress: any): Promise<any> => {\n  const reader = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    reader.onload = () => {\n      const imageData = reader.result?.toString().split(\",\")[1];\n\n      if (!imageData) {\n        reject(\"Failed to read image data.\");\n        return;\n      }\n\n      const data = {\n        \"file\": { \"filetype\": file.type, \"contents\": imageData }\n      };\n\n\n      http\n        .post(\"/upload\", data, {\n          headers: {\n            \"Content-Type\": \"application/json\", // Set the content type to JSON\n          },\n          onUploadProgress,\n        })\n        .then((response) => {\n          resolve(response.data);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    };\n\n    reader.readAsDataURL(file); // Read the file as a data URL\n  });\n}\n\nexport default upload;\n"],"mappings":"AAAA,MAAO,CAAAA,IAAI,KAAM,gBAAgB,CAEjC,GAAM,CAAAC,MAAM,CAAG,QAAT,CAAAA,MAAMA,CAAIC,IAAU,CAAEC,gBAAqB,CAAmB,CAClE,GAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,UAAU,CAAC,CAAC,CAE/B,MAAO,IAAI,CAAAC,OAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK,CACtCJ,MAAM,CAACK,MAAM,CAAG,UAAM,KAAAC,cAAA,CACpB,GAAM,CAAAC,SAAS,EAAAD,cAAA,CAAGN,MAAM,CAACQ,MAAM,UAAAF,cAAA,iBAAbA,cAAA,CAAeG,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAEzD,GAAI,CAACH,SAAS,CAAE,CACdH,MAAM,CAAC,4BAA4B,CAAC,CACpC,OACF,CAEA,GAAM,CAAAO,IAAI,CAAG,CACX,MAAM,CAAE,CAAE,UAAU,CAAEb,IAAI,CAACc,IAAI,CAAE,UAAU,CAAEL,SAAU,CACzD,CAAC,CAGDX,IAAI,CACDiB,IAAI,CAAC,SAAS,CAAEF,IAAI,CAAE,CACrBG,OAAO,CAAE,CACP,cAAc,CAAE,kBAAoB;AACtC,CAAC,CACDf,gBAAgB,CAAhBA,gBACF,CAAC,CAAC,CACDgB,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClBb,OAAO,CAACa,QAAQ,CAACL,IAAI,CAAC,CACxB,CAAC,CAAC,CACDM,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBd,MAAM,CAACc,KAAK,CAAC,CACf,CAAC,CAAC,CACN,CAAC,CAEDlB,MAAM,CAACmB,aAAa,CAACrB,IAAI,CAAC,CAAE;AAC9B,CAAC,CAAC,CACJ,CAAC,CAED,cAAe,CAAAD,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}