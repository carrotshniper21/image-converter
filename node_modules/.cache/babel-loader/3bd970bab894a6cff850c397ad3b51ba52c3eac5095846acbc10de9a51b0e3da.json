{"ast":null,"code":"var _jsxFileName = \"/home/carrot/repos/image-converter/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\nimport upload from \"./services/FileUploadService\";\nimport JSZip from 'jszip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [binaryData, setBinaryData] = useState(null);\n  const [hexData, setHexData] = useState(null);\n  const handleUpload = useCallback(() => {\n    if (selectedFile) {\n      upload(selectedFile, progressEvent => {\n        const percentCompleted = Math.round(progressEvent.loaded / progressEvent.total * 100);\n        console.log(`Upload Progress: ${percentCompleted}%`);\n      }).then(response => {\n        setBinaryData(response.binary);\n        setHexData(response.hex);\n      }).catch(error => {\n        console.error(\"File upload error:\", error);\n      });\n    }\n  }, [selectedFile]);\n  useEffect(() => {\n    if (selectedFile) {\n      handleUpload();\n    }\n  }, [selectedFile, handleUpload]);\n  const handleFileChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setSelectedFile(event.target.files[0]);\n      setBinaryData(null);\n      setHexData(null);\n    }\n  };\n  const downloadZippedData = () => {\n    if (binaryData && hexData) {\n      const zip = new JSZip();\n      zip.file('binary.txt', Array.from(binaryData).join(' '));\n      zip.file('hex.txt', hexData);\n      zip.generateAsync({\n        type: 'blob'\n      }).then(content => {\n        // Create a temporary link to trigger the download\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(content);\n        link.download = 'binary_and_hex.zip';\n        link.click();\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"drop-container\",\n        id: \"dropcontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"drop-title\",\n          children: \"Drop files here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), \"or\", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"fileupload\",\n          type: \"file\",\n          name: \"fileupload\",\n          onChange: handleFileChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), binaryData && hexData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"filedownload\",\n          id: \"filedownload\",\n          onClick: downloadZippedData,\n          children: \"Download Zipped Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"dfhvMM+6Hh+v+Pd34Oc7sMtC6YU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","upload","JSZip","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","binaryData","setBinaryData","hexData","setHexData","handleUpload","progressEvent","percentCompleted","Math","round","loaded","total","console","log","then","response","binary","hex","catch","error","handleFileChange","event","target","files","downloadZippedData","zip","file","Array","from","join","generateAsync","type","content","link","document","createElement","href","URL","createObjectURL","download","click","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","name","onChange","required","onClick","_c","$RefreshReg$"],"sources":["/home/carrot/repos/image-converter/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\nimport upload from \"./services/FileUploadService\";\nimport JSZip from 'jszip';\n\nconst App: React.FC = () => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [binaryData, setBinaryData] = useState<Uint8Array | null>(null);\n  const [hexData, setHexData] = useState<string | null>(null);\n\n  const handleUpload = useCallback(() => {\n    if (selectedFile) {\n      upload(selectedFile, (progressEvent: ProgressEvent) => {\n        const percentCompleted = Math.round((progressEvent.loaded / progressEvent.total) * 100);\n        console.log(`Upload Progress: ${percentCompleted}%`);\n      })\n        .then((response) => {\n          setBinaryData(response.binary);\n          setHexData(response.hex);\n        })\n        .catch((error) => {\n          console.error(\"File upload error:\", error);\n        });\n    }\n  }, [selectedFile]);\n\n  useEffect(() => {\n    if (selectedFile) {\n      handleUpload();\n    }\n  }, [selectedFile, handleUpload]);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setSelectedFile(event.target.files[0]);\n      setBinaryData(null);\n      setHexData(null);\n    }\n  };\n\n  const downloadZippedData = () => {\n    if (binaryData && hexData) {\n      const zip = new JSZip();\n      zip.file('binary.txt', Array.from(binaryData).join(' '));\n      zip.file('hex.txt', hexData);\n\n      zip.generateAsync({ type: 'blob' }).then((content) => {\n        // Create a temporary link to trigger the download\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(content);\n        link.download = 'binary_and_hex.zip';\n        link.click();\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <label className=\"drop-container\" id=\"dropcontainer\">\n          <span className=\"drop-title\">Drop files here</span>\n          or\n          <input id=\"fileupload\" type=\"file\" name=\"fileupload\" onChange={handleFileChange} required />\n        </label>\n        {binaryData && hexData && (\n          <div>\n            <button className=\"filedownload\" id=\"filedownload\" onClick={downloadZippedData}>Download Zipped Data</button>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}